library(evaluate)
head(mtcars,4)
---
title: "Learning R"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd+Shift+Enter*.
```{r}
plot(cars)
```
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Cmd+Option+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Cmd+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
Here is another code chunk.
```{r}
head(mtcars,4)
```
head(mtcars,4)
head(mtcars,4)
plot(cars)
mean(mtcars$mpg)
library(tidyverse)
library(tidyverse)
plot(cars)
library(tidyverse)
plot(cars)
library(tidyverse)
plot(cars)
head(mtcars,4)
head(mtcars,4)
mean(mtcars$mpg)
library(RSQLite)
install.packages("RSQLite")
install.packages("RSQLite")
sp <- sunspots
sp <- sunspots
sp
sp <- sunspots
i <- 1
y <- 1
x -> seq(from = 1, to = length(sp), by = 12)
sp <- sunspots
i <- 1
y <- 1
x <- seq(from = 1, to = length(sp), by = 12)
x
sp <- sunspots
i <- 1
y <- 1
x <- seq(from = 1, to = length(sp), by = 12)
for (v in x) { y[i] <- sum(sp[v:(v+11)]); i <- i + 1}
sp <- sunspots
i <- 1
y <- 1
x <- seq(from = 1, to = length(sp), by = 12)
for (v in x) { y[i] <- sum(sp[v:(v+11)]); i <- i + 1}
length(which(y < 5))
install.packages("RSQLite")
library(RSQLite)
fpath = "/Documents/Coding/CS5200_code/"
dbfile = "assignment3DB.sqlite"
dbcon <- dbConnect(RSQLite::SQLite(). paste0(fpath,dbfile))
library(RSQLite)
fpath = "/Documents/Coding/CS5200_code/"
dbfile = "assignment3DB.sqlite"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "/Documents/Coding/CS5200_code/"
dbfile = "assignment3DB.DB"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "/Documents/Coding/CS5200_code/"
dbfile = "assignment3DB.DB"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "/Documents/Coding/CS5200_code/"
dbfile = "assignment3DB.DB"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "/Documents/Coding/CS5200_code/"
dbfile = "assignment3D.DB"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "/Documents/Coding/CS5200_code/"
dbfile = "assignment3D.DB"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "/Documents/Coding/"
dbfile = "assignment3D.DB"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "/Documents/Coding/CS5200_code"
dbfile = "assignment3DB.DB"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "/Documents/Coding/CS5200_code"
dbfile = "assignment3DB.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "/Documents/Coding/CS5200_code"
dbfile = "assignment3DB.sqlite"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
getwd()
ls
library(RSQLite)
fpath = "$/Documents/Coding/CS5200_code"
dbfile = "assignment3DB.sqlite"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
library(RSQLite)
fpath = "Documents/Coding/CS5200_code"
dbfile = "assignment3DB.sqlite"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "Documents/Coding/CS5200_code"
dbfile = "assignment3DB.sqlite"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "Documents/Coding/CS5200_code"
dbfile = "assignment3DB.sqlite"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "~/Documents/Coding/CS5200_code/"
dbfile = "A3Test.sqlite"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "~/Documents/Coding/CS5200_code/"
dbfile = "A3Test.sqlite"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(RSQLite)
fpath = "~/Google\ Drive/Northeastern\ University/CS5200/Week\ 5/"
dbfile = "MediaDB.db"
# if database file already exists, we connect to it, otherwise
# we create a new database
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath,dbfile))
dbDisconnect(dbcon)
library(tidyverse)
library(RMySQL)
library(RSQLite)
library(sqldf)
dbcon <- dbConnect(RMySQL::MySQL(), user='newuser', password = 'test',
dbname = 'practicum', host = 'localhost')
birdStrikesData <- read.csv(file.path("~/Google\ Drive/Northeastern\ University/CS5200/Practicum/BirdStrikesData.csv"), header=TRUE, na.strings=c(""," ", "NA"))
names(birdStrikesData)[names(birdStrikesData) == "Record.ID"] <- "record_id"
names(birdStrikesData)[names(birdStrikesData) == "Wildlife..Number.struck"] <- "wildlife_number_struck"
names(birdStrikesData)[names(birdStrikesData) == "Wildlife..Number.Struck.Actual"] <- "wildlife_number_struck_actual"
names(birdStrikesData)[names(birdStrikesData) == "Aircraft..Make.Model"] <- "aircraft_model"
names(birdStrikesData)[names(birdStrikesData) == "Aircraft..Type"] <- "aircraft_type"
names(birdStrikesData)[names(birdStrikesData) == "Aircraft..Number.of.engines."] <- "number_of_engines"
names(birdStrikesData)[names(birdStrikesData) == "Is.Aircraft.Large."] <- "is_aircraft_large"
names(birdStrikesData)[names(birdStrikesData) == "Wildlife..Species"] <- "wildlife_species"
names(birdStrikesData)[names(birdStrikesData) == "Wildlife..Size"] <- "wildlife_size"
names(birdStrikesData)[names(birdStrikesData) == "FlightDate"] <- "flight_date"
names(birdStrikesData)[names(birdStrikesData) == "Airport..Name"] <- "airport_name"
names(birdStrikesData)[names(birdStrikesData) == "Origin.State"] <- "origin_state"
names(birdStrikesData)[names(birdStrikesData) == "Aircraft..Airline.Operator"] <- "airline_or_operator"
names(birdStrikesData)[names(birdStrikesData) == "Effect..Impact.to.flight"] <- "effect_to_flight"
names(birdStrikesData)[names(birdStrikesData) == "Effect..Indicated.Damage"] <- "effect_indicated_damage"
names(birdStrikesData)[names(birdStrikesData) == "When..Phase.of.flight"] <- "phase_of_flight"
names(birdStrikesData)[names(birdStrikesData) == "Remains.of.wildlife.collected."] <- "remains_of_wildlife_collected"
names(birdStrikesData)[names(birdStrikesData) == "Remains.of.wildlife.sent.to.Smithsonian"] <- "remains_of_wildlife_sent_to_smithsonian"
names(birdStrikesData)[names(birdStrikesData) == "Conditions..Sky"] <- "conditions_sky"
names(birdStrikesData)[names(birdStrikesData) == "Conditions..Precipitation"] <- "conditions_precipitation"
names(birdStrikesData)[names(birdStrikesData) == "Pilot.warned.of.birds.or.wildlife."] <- "pilot_warned_of_birds_or_wildlife"
names(birdStrikesData)[names(birdStrikesData) == "Cost..Total.."] <- "cost_total_dollars"
names(birdStrikesData)[names(birdStrikesData) == "Feet.above.ground"] <- "feet_above_ground"
names(birdStrikesData)[names(birdStrikesData) == "Number.of.people.injured"] <- "number_of_people_injured"
names(birdStrikesData)[names(birdStrikesData) == "Remarks"] <- "remarks"
head(birdStrikesData)
birdStrikesData$airline_or_operator[is.na(birdStrikesData$airline_or_operator)] <- "UNKNOWN"
birdStrikesData$aircraft_model[is.na(birdStrikesData$aircraft_model)] <- "UNKNOWN"
birdStrikesData$airport_name[is.na(birdStrikesData$airport_name)] <- "UNKNOWN"
birdStrikesData$airport_name[is.na(birdStrikesData$wildlife_size)] <- "UNKNOWN"
birdStrikesData$airport_name[is.na(birdStrikesData$phase_of_flight)] <- "UNKNOWN"
birdStrikesData$airport_name[is.na(birdStrikesData$effect_indicated_damage)] <- "UNKNOWN"
birdStrikesData$airport_name[is.na(birdStrikesData$effect_to_flight)] <- "UNKNOWN"
birdStrikesData$is_aircraft_large[birdStrikesData$is_aircraft_large=='Yes'] <- 1
birdStrikesData$is_aircraft_large[birdStrikesData$is_aircraft_large=='No'] <- 0
birdStrikesData$remains_of_wildlife_collected[birdStrikesData$remains_of_wildlife_collected=='FALSE'] <- 0
birdStrikesData$remains_of_wildlife_collected[birdStrikesData$remains_of_wildlife_collected=='TRUE'] <- 1
birdStrikesData$remains_of_wildlife_sent_to_smithsonian[birdStrikesData$remains_of_wildlife_sent_to_smithsonian=='FALSE'] <- 0
birdStrikesData$remains_of_wildlife_sent_to_smithsonian[birdStrikesData$remains_of_wildlife_sent_to_smithsonian=='TRUE'] <- 1
birdStrikesData$pilot_warned_of_birds_or_wildlife[birdStrikesData$pilot_warned_of_birds_or_wildlife=='N'] <- 0
birdStrikesData$pilot_warned_of_birds_or_wildlife[birdStrikesData$pilot_warned_of_birds_or_wildlife=='Y'] <- 1
birdStrikesData$flight_date <- as.Date(birdStrikesData$flight_date, format = "%m/%d/%Y")
rm(aircraft)
aircraft <- 0
aircraft$aircraft_model <- birdStrikesData$aircraft_model
aircraft$aircraft_type <- birdStrikesData$aircraft_type
aircraft$number_of_engines <- birdStrikesData$number_of_engines
aircraft$is_aircraft_large <- birdStrikesData$is_aircraft_large
aircraft <- data.frame(aircraft)
aircraft <- subset(aircraft, select=-c(X0))
head(aircraft)
options(sqldf.driver = "SQLite")
aircraft <- sqldf("select DISTINCT aircraft_model, aircraft_type, number_of_engines, is_aircraft_large
from aircraft")
aircraft$aircraft_id <- seq.int(nrow(aircraft))
options(sqldf.driver = "RMySQL")
options(sqldf.driver = "SQLite")
sqldf("SELECT aircraft_model FROM aircraft GROUP BY aircraft_model having 1 <> COUNT((aircraft_model))")
options(sqldf.driver = "RMySQL")
aircraft <- aircraft[aircraft$aircraft_model != "A-300" | "4" != aircraft$number_of_engines,]
aircraft <- aircraft[aircraft$aircraft_model != "RKWLTRBO 690" | "C" != aircraft$number_of_engines,]
aircraft <- aircraft[aircraft$aircraft_model != "B-747-8 SERIES" | !is.na(aircraft$number_of_engines),]
aircraft <- aircraft[aircraft$aircraft_model != "C-680" | !is.na(aircraft$number_of_engines),]
aircraft <- aircraft[aircraft$aircraft_model != "EC-135" | !is.na(aircraft$number_of_engines),]
aircraft <- aircraft[aircraft$aircraft_model != "HUGHES 269A" | !is.na(aircraft$number_of_engines),]
dbSendQuery(dbcon, "SET GLOBAL local_infile = true;") # Would not allow me to write to the database without this.
dbWriteTable(dbcon, "aircraft", aircraft, append = TRUE, header = TRUE, row.names=FALSE)
options(sqldf.driver = "SQLite")
test <- sqldf("SELECT * FROM birdStrikesData
INNER JOIN aircraft
ON birdStrikesData.aircraft_model = aircraft.aircraft_model")
test <- test[!duplicated(as.list(test))]
test$number_of_engines.1 <- NULL
options(sqldf.driver = "RMySQL")
test$flight_id <- seq.int(nrow(test))
rm(flight)
flight <- 0
flight$airline_or_operator <- test$airline_or_operator
flight$airport_name <- test$airport_name
flight$origin_state <- test$origin_state
flight$flight_date <- test$flight_date
flight$aircraft_id <- test$aircraft_id
flight$flight_id <- test$flight_id
flight <- data.frame(flight)
flight <- subset(flight, select=-c(X0))
dbWriteTable(dbcon, "flight", flight, append = TRUE, header = TRUE, row.names=FALSE)
birdWrite <- test
birdWrite <- subset(birdWrite, select=-c(aircraft_id))
birdWrite <- subset(birdWrite, select=-c(aircraft_model))
birdWrite <- subset(birdWrite, select=-c(aircraft_type))
birdWrite <- subset(birdWrite, select=-c(number_of_engines))
birdWrite <- subset(birdWrite, select=-c(is_aircraft_large))
birdWrite <- subset(birdWrite, select=-c(airline_or_operator))
birdWrite <- subset(birdWrite, select=-c(airport_name))
birdWrite <- subset(birdWrite, select=-c(origin_state))
birdWrite <- subset(birdWrite, select=-c(flight_date))
birdWrite <- subset(birdWrite, select=-c(Altitude.bin))
birdWrite <- subset(birdWrite, select=-c(wildlife_number_struck))
dbWriteTable(dbcon, "bird_strike", birdWrite, append = TRUE, header = TRUE, row.names=FALSE)
BirdStrikesStart <- dbGetQuery(dbcon, "SELECT year(flight_date), count(record_id) as num_strikes FROM practicum.bird_strike as bird_strike
INNER JOIN practicum.flight as flight on flight.flight_id = bird_strike.flight_id
WHERE phase_of_flight = 'Climb' OR phase_of_flight = 'Take-off run'
GROUP BY year(flight_date)
ORDER BY year(flight_date) ASC;")
BirdStrikesEnd <- dbGetQuery(dbcon, "SELECT year(flight_date), count(record_id) as num_strikes FROM practicum.bird_strike as bird_strike
INNER JOIN practicum.flight as flight on flight.flight_id = bird_strike.flight_id
WHERE phase_of_flight = 'Descent' OR phase_of_flight = 'Approach' OR phase_of_flight = 'Landing'
GROUP BY year(flight_date)
ORDER BY year(flight_date) ASC;")
Year = c(2008:2011)
BirdStrikesRelevantYearsBeginningOfFlight <- data.frame(Year)
BirdStrikesRelevantYearsEndOfFlight <- data.frame(Year)
BirdStrikesRelevantYearsBeginningOfFlight$BirdStrikes <- BirdStrikesStart[BirdStrikesStart$`year(flight_date)` == Year, ]$num_strikes
BirdStrikesRelevantYearsEndOfFlight$BirdStrikes <- BirdStrikesEnd[BirdStrikesEnd$`year(flight_date)` == Year, ]$num_strikes
BirdStrikesRelevantYearsBeginningOfFlight$When = "take-off/climbing"
BirdStrikesRelevantYearsEndOfFlight$When = "descent/approach/landing"
BirdStrikesRelevantYearsBeginningOfFlight
BirdStrikesRelevantYearsEndOfFlight
BirdStrikesRelevantYears <- rbind(BirdStrikesRelevantYearsBeginningOfFlight, BirdStrikesRelevantYearsEndOfFlight)
#BirdStrikesRelevantYears
ggplot(BirdStrikesRelevantYears, aes(fill=When, y=BirdStrikes, x=Year)) + geom_bar(position="dodge", stat="identity") + labs(title= "Bird Strikes Strikes in Accordance to Year and Phase of Flight") + xlab("Year") + ylab("Number of Bird Strikes") + labs(fill='Phase of Flight')
dbDisconnect(dbcon)
